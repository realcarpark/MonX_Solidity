{
  "language": "Solidity",
  "sources": {
    "contracts/Migrations.sol": {
      "content": "pragma solidity 0.6.12;\r\n\r\ncontract Migrations {\r\n  address public owner;\r\n  uint public last_completed_migration;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier restricted() {\r\n    if (msg.sender == owner) _;\r\n  }\r\n\r\n  function setCompleted(uint completed) public restricted {\r\n    last_completed_migration = completed;\r\n  }\r\n\r\n  function upgrade(address new_address) public restricted {\r\n    Migrations upgraded = Migrations(new_address);\r\n    upgraded.setCompleted(last_completed_migration);\r\n  }\r\n}"
    },
    "contracts/MockERC20.sol": {
      "content": "pragma solidity 0.6.12;\r\n\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n\r\ncontract MockERC20 is ERC20 {\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 supply\r\n    ) public ERC20(name, symbol) {\r\n        _mint(msg.sender, supply);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Monoswap.sol": {
      "content": "pragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/math/Math.sol\";\r\n// import \"@nomiclabs/buidler/console.sol\";\r\n\r\ninterface IvUSD is IERC20 {\r\n  function mint (address account, uint256 amount) external;\r\n\r\n  function burn (address account, uint256 amount) external;\r\n}\r\n\r\n\r\n/**\r\n * The Monoswap is ERC1155 contract does this and that...\r\n */\r\ncontract Monoswap is ERC1155, Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n  using SafeERC20 for IvUSD;\r\n\r\n  IvUSD vUSD;\r\n  address feeTo;\r\n  uint16 fees=300; // over 1e5, so 300 means 0.3%\r\n  uint16 devFee = 50; // over 1e5, so 50 means 0.05%\r\n\r\n  mapping (uint256 => uint256) public totalSupply;\r\n  uint256 MINIMUM_LIQUIDITY=1e3;\r\n\r\n  struct PoolInfo {\r\n    uint256 pid;\r\n    uint256 lastPoolValue;\r\n    address token;\r\n    PoolStatus status;\r\n    uint112 vusdDebt;\r\n    uint112 vusdCredit;\r\n    uint112 tokenBalance;\r\n    uint112 price; // over 1e18\r\n  }\r\n\r\n  enum TxType {\r\n    SELL,\r\n    BUY\r\n  }\r\n\r\n  enum PoolStatus {\r\n    UNLISTED,\r\n    LISTED,\r\n    OFFICIAL\r\n  }\r\n  \r\n  mapping (address => PoolInfo) public pools;\r\n  mapping (address => uint8) private tokenStatus; //0=unlocked, 1=locked, 2=exempt\r\n  mapping (address => uint8) public tokenPoolStatus; //0=undefined, 1=exists\r\n\r\n  uint256 public poolSize=0;\r\n\r\n  uint private unlocked = 1;\r\n  modifier lock() {\r\n    require(unlocked == 1, 'Monoswap: LOCKED');\r\n    unlocked = 0;\r\n    _;\r\n    unlocked = 1;\r\n  }\r\n\r\n  modifier lockToken(address _token) { \r\n    uint8 originalState = tokenStatus[_token];\r\n    require(originalState!=1, 'Monoswap: POOL LOCKED');\r\n    if(originalState==0) {\r\n      tokenStatus[_token] = 1;\r\n    }\r\n    _;\r\n    if(originalState==0) {\r\n      tokenStatus[_token] = 0;\r\n    }\r\n  }\r\n\r\n  modifier ensure(uint deadline) {\r\n    require(deadline >= block.timestamp, 'Monoswap: EXPIRED');\r\n    _;\r\n  }  \r\n\r\n  event AddLiquidity(address indexed provider, \r\n    uint indexed pid,\r\n    address indexed token,\r\n    uint liquidityAmount,\r\n    uint vusdAmount, uint tokenAmount);\r\n\r\n  event RemoveLiquidity(address indexed provider, \r\n    uint indexed pid,\r\n    address indexed token,\r\n    uint liquidityAmount,\r\n    uint vusdAmount, uint tokenAmount);\r\n\r\n  event Swap(\r\n    address indexed user,\r\n    address indexed tokenIn,\r\n    address indexed tokenOut,\r\n    uint amountIn,\r\n    uint amountOut\r\n  );\r\n  \r\n  constructor(IvUSD _vusd) public ERC1155(\"{1}\") {\r\n    vUSD = _vusd;\r\n  }\r\n\r\n  function setFeeTo (address _feeTo) onlyOwner external {\r\n    feeTo = _feeTo;\r\n  }\r\n  \r\n  function setFees (uint16 _fees) onlyOwner external {\r\n    require(_fees<1e3, \"fees too large\");\r\n    fees = _fees;\r\n  }\r\n\r\n  function setDevFee (uint16 _devFee) onlyOwner external {\r\n    require(_devFee<1e3, \"devFee too large\");\r\n    devFee = _devFee;\r\n  }\r\n\r\n  function mint (address account, uint256 id, uint256 amount) internal {\r\n    totalSupply[id]=totalSupply[id].add(amount);\r\n    _mint(account, id, amount, \"\");\r\n  }\r\n\r\n  function burn (address account, uint256 id, uint256 amount) internal {\r\n    totalSupply[id]=totalSupply[id].sub(amount);\r\n    _burn(account, id, amount);\r\n  }\r\n\r\n  // creates a pool\r\n  function _createPool (address _token, uint112 _price, PoolStatus _status) lock internal returns(uint256 _pid)  {\r\n    require(tokenPoolStatus[_token]==0, \"Monoswap: Token Exists\");\r\n    require (_token != address(vUSD), \"Monoswap: vUSD pool not allowed\");\r\n    _pid = poolSize;\r\n    pools[_token] = PoolInfo({\r\n      token: _token,\r\n      pid: _pid,\r\n      vusdCredit: 0,\r\n      vusdDebt: 0,\r\n      tokenBalance: 0,\r\n      lastPoolValue: 0,\r\n      status: _status,\r\n      price: _price\r\n    });\r\n\r\n    poolSize = _pid.add(1);\r\n    tokenPoolStatus[_token]=1;\r\n  }\r\n\r\n  // creates an official pool\r\n  function addOfficialToken (address _token, uint112 _price) onlyOwner external returns(uint256 _pid)  {\r\n    _pid = _createPool(_token, _price, PoolStatus.OFFICIAL);\r\n  }\r\n\r\n  // internal func to pay contract owner\r\n  function _mintFee (uint256 pid, uint256 lastPoolValue, uint256 newPoolValue) internal {\r\n    uint256 _totalSupply = totalSupply[pid];\r\n    if(newPoolValue>lastPoolValue && lastPoolValue>0) {\r\n      // safe ops, since newPoolValue>lastPoolValue\r\n      uint256 deltaPoolValue = newPoolValue - lastPoolValue; \r\n\r\n      // safe ops, since newPoolValue = deltaPoolValue + lastPoolValue > deltaPoolValue\r\n      uint256 devLiquidity = _totalSupply.mul(deltaPoolValue).mul(devFee).div(newPoolValue-deltaPoolValue)/1e5;\r\n      mint(feeTo, pid, devLiquidity);\r\n    }\r\n\r\n  }\r\n\r\n  // util func to get some basic pool info\r\n  function getPool (address _token) view public returns (uint256 poolValue, \r\n    uint256 tokenBalanceVusdValue, uint256 vusdCredit, uint256 vusdDebt) {\r\n    PoolInfo memory pool = pools[_token];\r\n    vusdCredit = pool.vusdCredit;\r\n    vusdDebt = pool.vusdDebt;\r\n    tokenBalanceVusdValue = uint(pool.price).mul(pool.tokenBalance)/1e18;\r\n\r\n    poolValue = tokenBalanceVusdValue.add(vusdCredit).sub(vusdDebt);\r\n  }\r\n\r\n  // trustless listing pool creation. always creates unofficial pool\r\n  function listNewToken (address _token, uint112 _price, \r\n    uint256 vusdAmount, \r\n    uint256 tokenAmount,\r\n    address to) public returns(uint _pid, uint256 liquidity) {\r\n    _pid = _createPool(_token, _price, PoolStatus.LISTED);\r\n    liquidity = addLiquidityPair(_token, vusdAmount, tokenAmount, to);\r\n  }\r\n\r\n  // add liquidity pair to a pool. allows adding vusd.\r\n  function addLiquidityPair (address _token, \r\n    uint256 vusdAmount, \r\n    uint256 tokenAmount,\r\n    address to) public returns(uint256 liquidity) {\r\n    require (tokenAmount>0, \"Monoswap: Bad Amount\");\r\n\r\n    require(tokenPoolStatus[_token]==1, \"Monoswap: No pool\");\r\n\r\n    (uint256 poolValue, , ,) = getPool(_token);\r\n    PoolInfo memory pool = pools[_token];\r\n    \r\n    _mintFee(pool.pid, pool.lastPoolValue, poolValue);\r\n    uint256 _totalSupply = totalSupply[pool.pid];\r\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), tokenAmount);\r\n    if(vusdAmount>0){\r\n      vUSD.safeTransferFrom(msg.sender, address(this), vusdAmount);\r\n    }\r\n\r\n    uint256 liquidityVusdValue = vusdAmount.add(tokenAmount.mul(pool.price)/1e18);\r\n\r\n    if(_totalSupply==0){\r\n      liquidity = liquidityVusdValue.sub(MINIMUM_LIQUIDITY);\r\n    }else{\r\n      liquidity = _totalSupply.mul(liquidityVusdValue).div(poolValue);\r\n    }\r\n\r\n    mint(to, pool.pid, liquidity);\r\n    _syncPoolInfo(_token, vusdAmount, 0);\r\n\r\n    emit AddLiquidity(to, \r\n    pool.pid,\r\n    _token,\r\n    liquidity, \r\n    vusdAmount, tokenAmount);\r\n  }\r\n  \r\n  // add one-sided liquidity to a pool. no vusd\r\n  function addLiquidity (address _token, uint256 _amount, address to) external returns(uint256 liquidity)  {\r\n    liquidity = addLiquidityPair(_token, 0, _amount, to);\r\n  }  \r\n\r\n  // updates pool vusd balance, token balance and last pool value.\r\n  // this function requires others to do the input validation\r\n  function _syncPoolInfo (address _token, uint256 vusdIn, uint256 vusdOut) lockToken(_token) internal returns(uint256 poolValue, \r\n    uint256 tokenBalanceVusdValue, uint256 vusdCredit, uint256 vusdDebt) {\r\n    // PoolInfo memory pool = pools[_token];\r\n    uint256 tokenPoolPrice = pools[_token].price;\r\n    (vusdCredit, vusdDebt) = _updateVusdBalance(_token, vusdIn, vusdOut);\r\n\r\n    uint256 tokenReserve = IERC20(_token).balanceOf(address(this));\r\n    tokenBalanceVusdValue = tokenPoolPrice.mul(tokenReserve)/1e18;\r\n\r\n    require(tokenReserve <= uint112(-1), 'OVERFLOW');\r\n    pools[_token].tokenBalance = uint112(tokenReserve);\r\n    poolValue = tokenBalanceVusdValue.add(vusdCredit).sub(vusdDebt);\r\n    pools[_token].lastPoolValue = poolValue;\r\n  }\r\n  \r\n  // view func for removing liquidity\r\n  function _removeLiquidity (address _token, uint256 liquidity,\r\n    address to) view public returns(\r\n    uint256 poolValue, uint256 liquidityIn, uint256 vusdOut, uint256 tokenOut) {\r\n    \r\n    require (liquidity>0, \"Monoswap: Bad Amount\");\r\n    uint256 tokenBalanceVusdValue;\r\n    uint256 vusdCredit;\r\n    uint256 vusdDebt;\r\n    PoolInfo memory pool = pools[_token];\r\n    (poolValue, tokenBalanceVusdValue, vusdCredit, vusdDebt) = getPool(_token);\r\n    uint256 _totalSupply = totalSupply[pool.pid];\r\n\r\n    liquidityIn = balanceOf(to, pool.pid)>liquidity?liquidity:balanceOf(to, pool.pid);\r\n    uint256 tokenReserve = IERC20(_token).balanceOf(address(this));\r\n    \r\n    if(tokenReserve < pool.tokenBalance){\r\n      tokenBalanceVusdValue = tokenReserve.mul(pool.price)/1e18;\r\n    }\r\n\r\n    if(vusdDebt>0){\r\n      tokenReserve = (tokenBalanceVusdValue.sub(vusdDebt)).mul(1e18).div(pool.price);\r\n    }\r\n\r\n    // if vusdCredit==0, vusdOut will be 0 as well\r\n    vusdOut = liquidityIn.mul(vusdCredit).div(_totalSupply);\r\n\r\n    tokenOut = liquidityIn.mul(tokenReserve).div(_totalSupply);\r\n\r\n  }\r\n  \r\n  // actually removes liquidity\r\n  function removeLiquidity (address _token, uint256 liquidity, address to, \r\n    uint256 minVusdOut, \r\n    uint256 minTokenOut) external returns(uint256 vusdOut, uint256 tokenOut)  {\r\n    require (tokenPoolStatus[_token]==1, \"Monoswap: Token Not Found\");\r\n    PoolInfo memory pool = pools[_token];\r\n    uint256 poolValue;\r\n    uint256 liquidityIn;\r\n    (poolValue, liquidityIn, vusdOut, tokenOut) = _removeLiquidity(_token, liquidity, to);\r\n\r\n    _mintFee(pool.pid, pool.lastPoolValue, poolValue);\r\n    require (vusdOut>=minVusdOut, \"Monoswap: Less vUSD than desired\");\r\n    require (tokenOut>=minTokenOut, \"Monoswap: Less token amount than desired\");\r\n\r\n    if (vusdOut>0){\r\n      vUSD.mint(to, vusdOut);\r\n    }\r\n\r\n    IERC20(_token).safeTransfer(to, tokenOut);\r\n\r\n    burn(to, pool.pid, liquidityIn);\r\n\r\n    _syncPoolInfo(_token, 0, vusdOut);\r\n\r\n    emit RemoveLiquidity(to, \r\n      pool.pid,\r\n      _token,\r\n      liquidityIn, \r\n      vusdOut, tokenOut);\r\n    \r\n  }\r\n\r\n  // util func to compute new price\r\n  function _getNewPrice (uint256 originalPrice, uint256 reserve, \r\n    uint256 delta, TxType txType) pure internal returns(uint256 price) {\r\n    if(txType==TxType.SELL) {\r\n      // no risk of being div by 0\r\n      price = originalPrice.mul(reserve)/(reserve.add(delta));\r\n    }else{ // BUY\r\n      price = originalPrice.mul(reserve).div(reserve.sub(delta));\r\n    }\r\n  }\r\n\r\n  // standard swap interface implementing uniswap router V2\r\n  // TODO: add ETH\r\n  function swapExactTokenForToken(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address to,\r\n    uint deadline\r\n  ) external virtual ensure(deadline) returns (uint amountOut) {\r\n    amountOut = swapIn(tokenIn, tokenOut, to, amountIn);\r\n    require(amountOut >= amountOutMin, 'Monoswap: INSUFFICIENT_OUTPUT_AMOUNT');\r\n  }\r\n\r\n  function swapTokenForExactToken(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint amountInMax,\r\n    uint amountOut,\r\n    address to,\r\n    uint deadline\r\n  ) external virtual ensure(deadline) returns (uint amountIn) {\r\n    amountIn = swapOut(tokenIn, tokenOut, to, amountOut);\r\n    require(amountIn <= amountInMax, 'Monoswap: EXCESSIVE_INPUT_AMOUNT');\r\n  }\r\n\r\n  // util func to manipulate vusd balance\r\n  function vusdBalanceAdd (uint256 _credit, uint256 _debt, \r\n    uint256 delta) internal pure returns (uint256 _newCredit, uint256 _newDebt) {\r\n    if(_debt>0){\r\n      if(delta>_debt){\r\n        _newDebt = 0;\r\n        _newCredit = _credit.add(delta - _debt);\r\n      }else{\r\n        _newCredit = 0;\r\n        _newDebt = _debt - delta;\r\n      }\r\n    }else{\r\n      _newCredit = _credit.add(delta);\r\n      _newDebt = 0;\r\n    }\r\n  }\r\n\r\n  // util func to manipulate vusd balance\r\n  function vusdBalanceSub (uint256 _credit, uint256 _debt, \r\n    uint256 delta) internal pure returns (uint256 _newCredit, uint256 _newDebt) {\r\n    if(_credit>0){\r\n      if(delta>_credit){\r\n        _newCredit = 0;\r\n        _newDebt = delta - _credit;\r\n      }else{\r\n        _newCredit = _credit - delta;\r\n        _newDebt = 0;\r\n      }\r\n    }else{\r\n      _newCredit = 0;\r\n      _newDebt = _debt.add(delta);\r\n    }\r\n  } \r\n\r\n  // util func to manipulate vusd balance\r\n  function _updateVusdBalance (address _token, \r\n    uint _vusdIn, uint _vusdOut) internal returns (uint _vusdCredit, uint _vusdDebt) {\r\n    if(_vusdIn>_vusdOut){\r\n      _vusdIn = _vusdIn - _vusdOut;\r\n      _vusdOut = 0;\r\n    }else{\r\n      _vusdOut = _vusdOut - _vusdIn;\r\n      _vusdIn = 0;\r\n    }\r\n\r\n    // PoolInfo memory _pool = pools[_token];\r\n    uint _poolVusdCredit = pools[_token].vusdCredit;\r\n    uint _poolVusdDebt = pools[_token].vusdDebt;\r\n    PoolStatus _poolStatus = pools[_token].status;\r\n    \r\n    if(_vusdOut>0){\r\n      (_vusdCredit, _vusdDebt) = vusdBalanceSub(\r\n        _poolVusdCredit, _poolVusdDebt, _vusdOut);\r\n      require(_vusdCredit <= uint112(-1) && _vusdDebt <= uint112(-1), 'OVERFLOW');\r\n      pools[_token].vusdCredit = uint112(_vusdCredit);\r\n      pools[_token].vusdDebt = uint112(_vusdDebt);\r\n    }\r\n\r\n    if(_vusdIn>0){\r\n      (_vusdCredit, _vusdDebt) = vusdBalanceAdd(\r\n        _poolVusdCredit, _poolVusdDebt, _vusdIn);\r\n      require(_vusdCredit <= uint112(-1) && _vusdDebt <= uint112(-1), 'OVERFLOW');\r\n      pools[_token].vusdCredit = uint112(_vusdCredit);\r\n      pools[_token].vusdDebt = uint112(_vusdDebt);\r\n    }\r\n\r\n    if(_poolStatus == PoolStatus.LISTED){\r\n\r\n      require (_vusdCredit>=0 && _vusdDebt==0, \"Monoswap: unofficial pool cannot bear debt\");\r\n    }\r\n  }\r\n  \r\n  // updates pool token balance and price.\r\n  function _updateTokenInfo (address _token, uint256 _price,\r\n      uint256 _vusdIn, uint256 _vusdOut) internal {\r\n    uint256 _balance = IERC20(_token).balanceOf(address(this));\r\n\r\n    require(_price <= uint112(-1) && _balance <= uint112(-1), 'OVERFLOW');\r\n    pools[_token].tokenBalance = uint112(_balance);\r\n    pools[_token].price = uint112(_price);\r\n\r\n    _updateVusdBalance(_token, _vusdIn, _vusdOut);\r\n    \r\n  }\r\n\r\n  // view func to compute amount required for tokenIn to get fixed amount of tokenOut\r\n  function getAmountIn(address tokenIn, address tokenOut, \r\n    uint256 amountOut) public view returns (uint256 tokenInPrice, uint256 tokenOutPrice, \r\n    uint256 amountIn, uint256 tradeVusdValue) {\r\n    require(amountOut > 0, 'Monoswap: INSUFFICIENT_INPUT_AMOUNT');\r\n    \r\n    uint256 amountOutWithFee = amountOut.mul(1e5+fees)/1e5;\r\n    address vusdAddress = address(vUSD);\r\n\r\n    if(tokenOut==vusdAddress){\r\n      tradeVusdValue = amountOutWithFee;\r\n      tokenOutPrice = 1e18;\r\n    }else{\r\n      require (tokenPoolStatus[tokenOut]==1, \"Monoswap: Token Not Found\");\r\n      // PoolInfo memory tokenOutPool = pools[tokenOut];\r\n      PoolStatus tokenOutPoolStatus = pools[tokenOut].status;\r\n      uint tokenOutPoolPrice = pools[tokenOut].price;\r\n      uint tokenOutPoolTokenBalance = pools[tokenOut].tokenBalance;\r\n      require (tokenOutPoolStatus != PoolStatus.UNLISTED, \"Monoswap: Pool Unlisted\");\r\n      tokenOutPrice = _getNewPrice(tokenOutPoolPrice, tokenOutPoolTokenBalance, \r\n        amountOutWithFee, TxType.BUY);\r\n\r\n      tradeVusdValue = tokenOutPrice.mul(amountOutWithFee)/1e18;\r\n    }\r\n\r\n    if(tokenIn==vusdAddress){\r\n      amountIn = tradeVusdValue;\r\n      tokenInPrice = 1e18;\r\n    }else{\r\n      require (tokenPoolStatus[tokenIn]==1, \"Monoswap: Token Not Found\");\r\n      // PoolInfo memory tokenInPool = pools[tokenIn];\r\n      PoolStatus tokenInPoolStatus = pools[tokenIn].status;\r\n      uint tokenInPoolPrice = pools[tokenIn].price;\r\n      uint tokenInPoolTokenBalance = pools[tokenIn].tokenBalance;\r\n      require (tokenInPoolStatus != PoolStatus.UNLISTED, \"Monoswap: Pool Unlisted\");\r\n      \r\n      uint256 preliminaryAmountIn = tradeVusdValue.mul(1e18).div(tokenInPoolPrice);\r\n      tokenInPrice = _getNewPrice(tokenInPoolPrice, tokenInPoolTokenBalance, \r\n        preliminaryAmountIn, TxType.SELL);\r\n      amountIn = tradeVusdValue.mul(1e18).div(tokenInPrice);\r\n    }\r\n  }\r\n  \r\n  // swap from tokenIn to tokenOut with fixed tokenOut amount.\r\n  function swapOut (address tokenIn, address tokenOut, address to, \r\n      uint256 amountOut) public lockToken(tokenIn) returns(uint256 amountIn)  {\r\n\r\n    IvUSD vusdLocal = vUSD;\r\n\r\n    uint256 tokenInPrice;\r\n    uint256 tokenOutPrice;\r\n    uint256 tradeVusdValue;\r\n    (tokenInPrice, tokenOutPrice, amountIn, tradeVusdValue) = getAmountIn(tokenIn, tokenOut, amountOut);\r\n\r\n    if(tokenStatus[tokenIn]==2){\r\n      IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\r\n    }else{\r\n      uint256 balanceIn0 = IERC20(tokenIn).balanceOf(address(this));\r\n      IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\r\n      uint256 balanceIn1 = IERC20(tokenIn).balanceOf(address(this));\r\n      require(amountIn >= balanceIn1.sub(balanceIn0), \"Monoswap: Not Enough Tokens\");\r\n    }\r\n\r\n    uint256 halfFeesInTokenIn = amountIn.mul(fees)/2e5;\r\n\r\n    uint256 oneSideFeesInVusd = tokenInPrice.mul(halfFeesInTokenIn)/1e18;\r\n\r\n    // trading in\r\n    if(tokenIn==address(vusdLocal)){\r\n      vusdLocal.burn(address(this), amountIn);\r\n      // all fees go to buy side\r\n      oneSideFeesInVusd = oneSideFeesInVusd.mul(2);\r\n    }else{\r\n      _updateTokenInfo(tokenIn, tokenInPrice, 0, tradeVusdValue.add(oneSideFeesInVusd));\r\n    }\r\n\r\n    // trading out\r\n    if(tokenOut==address(vusdLocal)){\r\n      vusdLocal.mint(to, amountOut);\r\n      // all fees go to sell side\r\n      _updateVusdBalance(tokenIn, oneSideFeesInVusd, 0);\r\n    }else{\r\n      IERC20(tokenOut).safeTransfer(to, amountOut);\r\n      _updateTokenInfo(tokenOut, tokenOutPrice, tradeVusdValue.add(oneSideFeesInVusd), 0);\r\n    }\r\n\r\n    emit Swap(to, tokenIn, tokenOut, amountIn, amountOut);\r\n\r\n    delete tokenInPrice;\r\n    delete tokenOutPrice;\r\n    delete tradeVusdValue;\r\n    delete oneSideFeesInVusd;\r\n  }\r\n\r\n  // view func to compute amount required for tokenOut to get fixed amount of tokenIn\r\n  function getAmountOut(address tokenIn, address tokenOut, \r\n    uint256 amountIn) public view returns (uint256 tokenInPrice, uint256 tokenOutPrice, \r\n    uint256 amountOut, uint256 tradeVusdValue) {\r\n    require(amountIn > 0, 'Monoswap: INSUFFICIENT_INPUT_AMOUNT');\r\n    \r\n    uint256 amountInWithFee = amountIn.mul(1e5-fees)/1e5;\r\n    address vusdAddress = address(vUSD);\r\n\r\n    if(tokenIn==vusdAddress){\r\n      tradeVusdValue = amountInWithFee;\r\n      tokenInPrice = 1e18;\r\n    }else{\r\n      require (tokenPoolStatus[tokenIn]==1, \"Monoswap: Token Not Found\");\r\n      // PoolInfo memory tokenInPool = pools[tokenIn];\r\n      PoolStatus tokenInPoolStatus = pools[tokenIn].status;\r\n      uint tokenInPoolPrice = pools[tokenIn].price;\r\n      uint tokenInPoolTokenBalance = pools[tokenIn].tokenBalance;\r\n\r\n      require (tokenInPoolStatus != PoolStatus.UNLISTED, \"Monoswap: Pool Unlisted\");\r\n      \r\n      tokenInPrice = _getNewPrice(tokenInPoolPrice, tokenInPoolTokenBalance, \r\n        amountInWithFee, TxType.SELL);\r\n      tradeVusdValue = tokenInPrice.mul(amountInWithFee)/1e18;\r\n    }\r\n\r\n    if(tokenOut==vusdAddress){\r\n      amountOut = tradeVusdValue;\r\n      tokenOutPrice = 1e18;\r\n    }else{\r\n      require (tokenPoolStatus[tokenOut]==1, \"Monoswap: Token Not Found\");\r\n      // PoolInfo memory tokenOutPool = pools[tokenOut];\r\n      PoolStatus tokenOutPoolStatus = pools[tokenOut].status;\r\n      uint tokenOutPoolPrice = pools[tokenOut].price;\r\n      uint tokenOutPoolTokenBalance = pools[tokenOut].tokenBalance;\r\n\r\n      require (tokenOutPoolStatus != PoolStatus.UNLISTED, \"Monoswap: Pool Unlisted\");\r\n      uint256 preliminaryAmountOut = tradeVusdValue.mul(1e18).div(tokenOutPoolPrice);\r\n      tokenOutPrice = _getNewPrice(tokenOutPoolPrice, tokenOutPoolTokenBalance, \r\n        preliminaryAmountOut, TxType.BUY);\r\n\r\n      amountOut = tradeVusdValue.mul(1e18).div(tokenOutPrice);\r\n    }\r\n  }\r\n\r\n  // swap from tokenIn to tokenOut with fixed tokenIn amount.\r\n  function swapIn (address tokenIn, address tokenOut, address to,\r\n      uint256 amountIn) public lockToken(tokenIn) returns(uint256 amountOut)  {\r\n\r\n    IvUSD vusdLocal = vUSD;\r\n\r\n    if(tokenStatus[tokenIn]==2){\r\n      IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\r\n    }else{\r\n      uint256 balanceIn0 = IERC20(tokenIn).balanceOf(address(this));\r\n      IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\r\n      uint256 balanceIn1 = IERC20(tokenIn).balanceOf(address(this));\r\n      amountIn = balanceIn1.sub(balanceIn0);\r\n    }\r\n\r\n    uint256 halfFeesInTokenIn = amountIn.mul(fees)/2e5;\r\n\r\n    uint256 tokenInPrice;\r\n    uint256 tokenOutPrice;\r\n    uint256 tradeVusdValue;\r\n    (tokenInPrice, tokenOutPrice, amountOut, tradeVusdValue) = getAmountOut(tokenIn, tokenOut, amountIn);\r\n\r\n    uint256 oneSideFeesInVusd = tokenInPrice.mul(halfFeesInTokenIn)/1e18;\r\n\r\n    // trading in\r\n    if(tokenIn==address(vusdLocal)){\r\n      vusdLocal.burn(address(this), amountIn);\r\n      // all fees go to the other side\r\n      oneSideFeesInVusd = oneSideFeesInVusd.mul(2);\r\n    }else{\r\n      _updateTokenInfo(tokenIn, tokenInPrice, 0, tradeVusdValue.add(oneSideFeesInVusd));\r\n    }\r\n\r\n    // trading out\r\n    if(tokenOut==address(vusdLocal)){\r\n      vusdLocal.mint(to, amountOut);\r\n    }else{\r\n      IERC20(tokenOut).safeTransfer(to, amountOut);\r\n      _updateTokenInfo(tokenOut, tokenOutPrice, tradeVusdValue.add(oneSideFeesInVusd), 0);\r\n    }\r\n\r\n    emit Swap(to, tokenIn, tokenOut, amountIn, amountOut);\r\n    \r\n    delete tokenInPrice;\r\n    delete tokenOutPrice;\r\n    delete tradeVusdValue;\r\n    delete oneSideFeesInVusd;\r\n  }\r\n  \r\n  \r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155MetadataURI.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"../../GSN/Context.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n *\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using SafeMath for uint256;\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping (uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\n     *\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\n     */\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    /*\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\n     */\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor (string memory uri) public {\n        _setURI(uri);\n\n        // register the supported interfaces to conform to ERC1155 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC1155);\n\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) external view override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    )\n        public\n        view\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            require(accounts[i] != address(0), \"ERC1155: batch balance query for the zero address\");\n            batchBalances[i] = _balances[ids[i]][accounts[i]];\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][from] = _balances[id][from].sub(amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][to] = _balances[id][to].add(amount);\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            _balances[id][from] = _balances[id][from].sub(\n                amount,\n                \"ERC1155: insufficient balance for transfer\"\n            );\n            _balances[id][to] = _balances[id][to].add(amount);\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] = _balances[id][account].add(amount);\n        emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        _balances[id][account] = _balances[id][account].sub(\n            amount,\n            \"ERC1155: burn amount exceeds balance\"\n        );\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint i = 0; i < ids.length; i++) {\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\n                amounts[i],\n                \"ERC1155: burn amount exceeds balance\"\n            );\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        internal virtual\n    { }\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        private\n    {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        private\n    {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"./IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n"
    },
    "@openzeppelin/contracts/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/VUSD.sol": {
      "content": "pragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract VUSD is ERC20(\"Virtual USD\", \"vUSD\"), Ownable {\r\n\tfunction mint (address account, uint256 amount) onlyOwner external {\r\n\t\t_mint(account, amount);\r\n\t}\r\n\r\n\tfunction burn (address account, uint256 amount) onlyOwner external {\r\n\t\t_burn(account, amount);\r\n\t}\r\n\t\r\n\t\r\n}"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": false
    },
    "optimizer": {
      "enabled": true,
      "runs": 20
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}